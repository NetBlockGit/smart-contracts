/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Blocklist, BlocklistInterface } from "../Blocklist";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_hostName",
        type: "string",
      },
    ],
    name: "addHostName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "blockcount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "blocklist",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b50610607806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806309d11e3014610046578063463c4bcb14610062578063dbc1bc1914610092575b600080fd5b610060600480360381019061005b91906102c3565b6100b0565b005b61007c60048036038101906100779190610304565b6100e4565b6040516100899190610375565b60405180910390f35b61009a610184565b6040516100a79190610397565b60405180910390f35b80600160008054815260200190815260200160002090805190602001906100d89291906101a3565b506100e161018a565b50565b6001602052806000526040600020600091509050805461010390610470565b80601f016020809104026020016040519081016040528092919081815260200182805461012f90610470565b801561017c5780601f106101515761010080835404028352916020019161017c565b820191906000526020600020905b81548152906001019060200180831161015f57829003601f168201915b505050505081565b60005481565b60008081548092919061019c906104d3565b9190505550565b8280546101af90610470565b90600052602060002090601f0160209004810192826101d15760008555610218565b82601f106101ea57805160ff1916838001178555610218565b82800160010185558215610218579182015b828111156102175782518255916020019190600101906101fc565b5b5090506102259190610229565b5090565b5b8082111561024257600081600090555060010161022a565b5090565b6000610259610254846103d7565b6103b2565b90508281526020810184848401111561027157600080fd5b61027c84828561042e565b509392505050565b600082601f83011261029557600080fd5b81356102a5848260208601610246565b91505092915050565b6000813590506102bd816105ba565b92915050565b6000602082840312156102d557600080fd5b600082013567ffffffffffffffff8111156102ef57600080fd5b6102fb84828501610284565b91505092915050565b60006020828403121561031657600080fd5b6000610324848285016102ae565b91505092915050565b600061033882610408565b6103428185610413565b935061035281856020860161043d565b61035b816105a9565b840191505092915050565b61036f81610424565b82525050565b6000602082019050818103600083015261038f818461032d565b905092915050565b60006020820190506103ac6000830184610366565b92915050565b60006103bc6103cd565b90506103c882826104a2565b919050565b6000604051905090565b600067ffffffffffffffff8211156103f2576103f161057a565b5b6103fb826105a9565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561045b578082015181840152602081019050610440565b8381111561046a576000848401525b50505050565b6000600282049050600182168061048857607f821691505b6020821081141561049c5761049b61054b565b5b50919050565b6104ab826105a9565b810181811067ffffffffffffffff821117156104ca576104c961057a565b5b80604052505050565b60006104de82610424565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156105115761051061051c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6105c381610424565b81146105ce57600080fd5b5056fea264697066735822122062c6316ae39df33a08b64a43db015754d5975c3db9e42690a566950fb837824164736f6c63430008040033";

type BlocklistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlocklistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Blocklist__factory extends ContractFactory {
  constructor(...args: BlocklistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Blocklist> {
    return super.deploy(overrides || {}) as Promise<Blocklist>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Blocklist {
    return super.attach(address) as Blocklist;
  }
  connect(signer: Signer): Blocklist__factory {
    return super.connect(signer) as Blocklist__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlocklistInterface {
    return new utils.Interface(_abi) as BlocklistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Blocklist {
    return new Contract(address, _abi, signerOrProvider) as Blocklist;
  }
}
