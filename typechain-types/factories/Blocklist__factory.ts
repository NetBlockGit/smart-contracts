/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Blocklist, BlocklistInterface } from "../Blocklist";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "newValue",
        type: "string",
      },
    ],
    name: "addHostName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getHostList",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "hostlist",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610764806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806309d11e30146100465780638e076cf014610062578063a67d144814610080575b600080fd5b610060600480360381019061005b9190610394565b6100b0565b005b61006a6100ef565b60405161007791906104f9565b60405180910390f35b61009a600480360381019061009591906103d5565b6101c8565b6040516100a7919061051b565b60405180910390f35b6000819080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906100eb929190610274565b5050565b60606000805480602002602001604051908101604052809291908181526020016000905b828210156101bf57838290600052602060002001805461013290610645565b80601f016020809104026020016040519081016040528092919081815260200182805461015e90610645565b80156101ab5780601f10610180576101008083540402835291602001916101ab565b820191906000526020600020905b81548152906001019060200180831161018e57829003601f168201915b505050505081526020019060010190610113565b50505050905090565b600081815481106101d857600080fd5b9060005260206000200160009150905080546101f390610645565b80601f016020809104026020016040519081016040528092919081815260200182805461021f90610645565b801561026c5780601f106102415761010080835404028352916020019161026c565b820191906000526020600020905b81548152906001019060200180831161024f57829003601f168201915b505050505081565b82805461028090610645565b90600052602060002090601f0160209004810192826102a257600085556102e9565b82601f106102bb57805160ff19168380011785556102e9565b828001600101855582156102e9579182015b828111156102e85782518255916020019190600101906102cd565b5b5090506102f691906102fa565b5090565b5b808211156103135760008160009055506001016102fb565b5090565b600061032a61032584610562565b61053d565b90508281526020810184848401111561034257600080fd5b61034d848285610603565b509392505050565b600082601f83011261036657600080fd5b8135610376848260208601610317565b91505092915050565b60008135905061038e81610717565b92915050565b6000602082840312156103a657600080fd5b600082013567ffffffffffffffff8111156103c057600080fd5b6103cc84828501610355565b91505092915050565b6000602082840312156103e757600080fd5b60006103f58482850161037f565b91505092915050565b600061040a8383610487565b905092915050565b600061041d826105a3565b61042781856105c6565b93508360208202850161043985610593565b8060005b85811015610475578484038952815161045685826103fe565b9450610461836105b9565b925060208a0199505060018101905061043d565b50829750879550505050505092915050565b6000610492826105ae565b61049c81856105d7565b93506104ac818560208601610612565b6104b581610706565b840191505092915050565b60006104cb826105ae565b6104d581856105e8565b93506104e5818560208601610612565b6104ee81610706565b840191505092915050565b600060208201905081810360008301526105138184610412565b905092915050565b6000602082019050818103600083015261053581846104c0565b905092915050565b6000610547610558565b90506105538282610677565b919050565b6000604051905090565b600067ffffffffffffffff82111561057d5761057c6106d7565b5b61058682610706565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610630578082015181840152602081019050610615565b8381111561063f576000848401525b50505050565b6000600282049050600182168061065d57607f821691505b60208210811415610671576106706106a8565b5b50919050565b61068082610706565b810181811067ffffffffffffffff8211171561069f5761069e6106d7565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610720816105f9565b811461072b57600080fd5b5056fea2646970667358221220641b556dbd585871610435be9b4cf8b05e7d11aca905d24e2b0fb99c6399124664736f6c63430008040033";

type BlocklistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlocklistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Blocklist__factory extends ContractFactory {
  constructor(...args: BlocklistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Blocklist> {
    return super.deploy(overrides || {}) as Promise<Blocklist>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Blocklist {
    return super.attach(address) as Blocklist;
  }
  connect(signer: Signer): Blocklist__factory {
    return super.connect(signer) as Blocklist__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlocklistInterface {
    return new utils.Interface(_abi) as BlocklistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Blocklist {
    return new Contract(address, _abi, signerOrProvider) as Blocklist;
  }
}
