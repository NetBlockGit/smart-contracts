/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Blocklist, BlocklistInterface } from "../Blocklist";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newValue",
        type: "string",
      },
    ],
    name: "addHostName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddr",
        type: "address",
      },
    ],
    name: "authorizeUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "authorizedUsers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getHostList",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "hostlist",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddr",
        type: "address",
      },
    ],
    name: "unAuthorizeUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610c03806100b86000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806367c2a3601161005b57806367c2a360146100ea5780638da5cb5b146101065780638e076cf014610124578063a67d1448146101425761007d565b806309151c7f1461008257806309d11e301461009e5780631828983a146100ba575b600080fd5b61009c60048036038101906100979190610689565b610172565b005b6100b860048036038101906100b391906106b2565b6101cd565b005b6100d460048036038101906100cf9190610689565b61029f565b6040516100e191906108b8565b60405180910390f35b61010460048036038101906100ff9190610689565b6102bf565b005b61010e6103a9565b60405161011b919061087b565b60405180910390f35b61012c6103cf565b6040516101399190610896565b60405180910390f35b61015c600480360381019061015791906106f3565b6104a8565b60405161016991906108d3565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610260576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610257906108f5565b60405180910390fd5b60008190806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061029b929190610554565b5050565b60016020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461034f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034690610915565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561049f57838290600052602060002001805461041290610a7b565b80601f016020809104026020016040519081016040528092919081815260200182805461043e90610a7b565b801561048b5780601f106104605761010080835404028352916020019161048b565b820191906000526020600020905b81548152906001019060200180831161046e57829003601f168201915b5050505050815260200190600101906103f3565b50505050905090565b600081815481106104b857600080fd5b9060005260206000200160009150905080546104d390610a7b565b80601f01602080910402602001604051908101604052809291908181526020018280546104ff90610a7b565b801561054c5780601f106105215761010080835404028352916020019161054c565b820191906000526020600020905b81548152906001019060200180831161052f57829003601f168201915b505050505081565b82805461056090610a7b565b90600052602060002090601f01602090048101928261058257600085556105c9565b82601f1061059b57805160ff19168380011785556105c9565b828001600101855582156105c9579182015b828111156105c85782518255916020019190600101906105ad565b5b5090506105d691906105da565b5090565b5b808211156105f35760008160009055506001016105db565b5090565b600061060a6106058461095a565b610935565b90508281526020810184848401111561062257600080fd5b61062d848285610a39565b509392505050565b60008135905061064481610b9f565b92915050565b600082601f83011261065b57600080fd5b813561066b8482602086016105f7565b91505092915050565b60008135905061068381610bb6565b92915050565b60006020828403121561069b57600080fd5b60006106a984828501610635565b91505092915050565b6000602082840312156106c457600080fd5b600082013567ffffffffffffffff8111156106de57600080fd5b6106ea8482850161064a565b91505092915050565b60006020828403121561070557600080fd5b600061071384828501610674565b91505092915050565b600061072883836107c3565b905092915050565b610739816109f1565b82525050565b600061074a8261099b565b61075481856109be565b9350836020820285016107668561098b565b8060005b858110156107a25784840389528151610783858261071c565b945061078e836109b1565b925060208a0199505060018101905061076a565b50829750879550505050505092915050565b6107bd81610a03565b82525050565b60006107ce826109a6565b6107d881856109cf565b93506107e8818560208601610a48565b6107f181610b3c565b840191505092915050565b6000610807826109a6565b61081181856109e0565b9350610821818560208601610a48565b61082a81610b3c565b840191505092915050565b6000610842600e836109e0565b915061084d82610b4d565b602082019050919050565b60006108656013836109e0565b915061087082610b76565b602082019050919050565b60006020820190506108906000830184610730565b92915050565b600060208201905081810360008301526108b0818461073f565b905092915050565b60006020820190506108cd60008301846107b4565b92915050565b600060208201905081810360008301526108ed81846107fc565b905092915050565b6000602082019050818103600083015261090e81610835565b9050919050565b6000602082019050818103600083015261092e81610858565b9050919050565b600061093f610950565b905061094b8282610aad565b919050565b6000604051905090565b600067ffffffffffffffff82111561097557610974610b0d565b5b61097e82610b3c565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006109fc82610a0f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610a66578082015181840152602081019050610a4b565b83811115610a75576000848401525b50505050565b60006002820490506001821680610a9357607f821691505b60208210811415610aa757610aa6610ade565b5b50919050565b610ab682610b3c565b810181811067ffffffffffffffff82111715610ad557610ad4610b0d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f6e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b7f73656e646572206973206e6f74206f776e657200000000000000000000000000600082015250565b610ba8816109f1565b8114610bb357600080fd5b50565b610bbf81610a2f565b8114610bca57600080fd5b5056fea2646970667358221220033451b601ba58dbe39c3c5e14a4542fcb72c249737bf1951a5b7d05ce0ae22f64736f6c63430008040033";

type BlocklistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlocklistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Blocklist__factory extends ContractFactory {
  constructor(...args: BlocklistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Blocklist> {
    return super.deploy(overrides || {}) as Promise<Blocklist>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Blocklist {
    return super.attach(address) as Blocklist;
  }
  connect(signer: Signer): Blocklist__factory {
    return super.connect(signer) as Blocklist__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlocklistInterface {
    return new utils.Interface(_abi) as BlocklistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Blocklist {
    return new Contract(address, _abi, signerOrProvider) as Blocklist;
  }
}
