/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Blocklist, BlocklistInterface } from "../Blocklist";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "hostname",
        type: "string",
      },
    ],
    name: "HostNameAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "HostNameDeleted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newValue",
        type: "string",
      },
    ],
    name: "addHostName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddr",
        type: "address",
      },
    ],
    name: "authorizeUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "authorizedUsers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getHostList",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "hostlist",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "removeHostList",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddr",
        type: "address",
      },
    ],
    name: "unAuthorizeUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610f8f806100b86000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146101115780638e076cf01461012f5780639b567cb61461014d578063a67d14481461016957610088565b806309151c7f1461008d57806309d11e30146100a95780631828983a146100c557806367c2a360146100f5575b600080fd5b6100a760048036038101906100a29190610988565b610199565b005b6100c360048036038101906100be91906109b1565b6101f4565b005b6100df60048036038101906100da9190610988565b6102fd565b6040516100ec9190610bc6565b60405180910390f35b61010f600480360381019061010a9190610988565b61031d565b005b610119610407565b6040516101269190610b89565b60405180910390f35b61013761042d565b6040516101449190610ba4565b60405180910390f35b610167600480360381019061016291906109f2565b610506565b005b610183600480360381019061017e91906109f2565b6106da565b6040516101909190610be1565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027e90610c03565b60405180910390fd5b6000819080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906102c2929190610786565b507f29205eb0c7ad84d9cfe64c7e47012225e8130a13a12e7fbf079f6ffc1b813a98816040516102f29190610be1565b60405180910390a150565b60016020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a490610c23565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000805480602002602001604051908101604052809291908181526020016000905b828210156104fd57838290600052602060002001805461047090610dd8565b80601f016020809104026020016040519081016040528092919081815260200182805461049c90610dd8565b80156104e95780601f106104be576101008083540402835291602001916104e9565b820191906000526020600020905b8154815290600101906020018083116104cc57829003601f168201915b505050505081526020019060010190610451565b50505050905090565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059090610c03565b60405180910390fd5b600060016000805490506105ad9190610d1a565b815481106105e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160008281548110610628577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200190805461063e90610dd8565b61064992919061080c565b506000805480610682577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600061069e9190610899565b90557f9838c313878774c7095f2ec13276b88235ab0bc2b3ac66435711b6407134fedb816040516106cf9190610c43565b60405180910390a150565b600081815481106106ea57600080fd5b90600052602060002001600091509050805461070590610dd8565b80601f016020809104026020016040519081016040528092919081815260200182805461073190610dd8565b801561077e5780601f106107535761010080835404028352916020019161077e565b820191906000526020600020905b81548152906001019060200180831161076157829003601f168201915b505050505081565b82805461079290610dd8565b90600052602060002090601f0160209004810192826107b457600085556107fb565b82601f106107cd57805160ff19168380011785556107fb565b828001600101855582156107fb579182015b828111156107fa5782518255916020019190600101906107df565b5b50905061080891906108d9565b5090565b82805461081890610dd8565b90600052602060002090601f01602090048101928261083a5760008555610888565b82601f1061084b5780548555610888565b8280016001018555821561088857600052602060002091601f016020900482015b8281111561088757825482559160010191906001019061086c565b5b50905061089591906108d9565b5090565b5080546108a590610dd8565b6000825580601f106108b757506108d6565b601f0160209004906000526020600020908101906108d591906108d9565b5b50565b5b808211156108f25760008160009055506001016108da565b5090565b600061090961090484610c83565b610c5e565b90508281526020810184848401111561092157600080fd5b61092c848285610d96565b509392505050565b60008135905061094381610f2b565b92915050565b600082601f83011261095a57600080fd5b813561096a8482602086016108f6565b91505092915050565b60008135905061098281610f42565b92915050565b60006020828403121561099a57600080fd5b60006109a884828501610934565b91505092915050565b6000602082840312156109c357600080fd5b600082013567ffffffffffffffff8111156109dd57600080fd5b6109e984828501610949565b91505092915050565b600060208284031215610a0457600080fd5b6000610a1284828501610973565b91505092915050565b6000610a278383610ac2565b905092915050565b610a3881610d4e565b82525050565b6000610a4982610cc4565b610a538185610ce7565b935083602082028501610a6585610cb4565b8060005b85811015610aa15784840389528151610a828582610a1b565b9450610a8d83610cda565b925060208a01995050600181019050610a69565b50829750879550505050505092915050565b610abc81610d60565b82525050565b6000610acd82610ccf565b610ad78185610cf8565b9350610ae7818560208601610da5565b610af081610ec8565b840191505092915050565b6000610b0682610ccf565b610b108185610d09565b9350610b20818560208601610da5565b610b2981610ec8565b840191505092915050565b6000610b41600e83610d09565b9150610b4c82610ed9565b602082019050919050565b6000610b64601383610d09565b9150610b6f82610f02565b602082019050919050565b610b8381610d8c565b82525050565b6000602082019050610b9e6000830184610a2f565b92915050565b60006020820190508181036000830152610bbe8184610a3e565b905092915050565b6000602082019050610bdb6000830184610ab3565b92915050565b60006020820190508181036000830152610bfb8184610afb565b905092915050565b60006020820190508181036000830152610c1c81610b34565b9050919050565b60006020820190508181036000830152610c3c81610b57565b9050919050565b6000602082019050610c586000830184610b7a565b92915050565b6000610c68610c79565b9050610c748282610e0a565b919050565b6000604051905090565b600067ffffffffffffffff821115610c9e57610c9d610e99565b5b610ca782610ec8565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610d2582610d8c565b9150610d3083610d8c565b925082821015610d4357610d42610e3b565b5b828203905092915050565b6000610d5982610d6c565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610dc3578082015181840152602081019050610da8565b83811115610dd2576000848401525b50505050565b60006002820490506001821680610df057607f821691505b60208210811415610e0457610e03610e6a565b5b50919050565b610e1382610ec8565b810181811067ffffffffffffffff82111715610e3257610e31610e99565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f6e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b7f73656e646572206973206e6f74206f776e657200000000000000000000000000600082015250565b610f3481610d4e565b8114610f3f57600080fd5b50565b610f4b81610d8c565b8114610f5657600080fd5b5056fea26469706673582212205d52bb5f08343c180228ae137631064db92a3eafe597d5569326f1c6289e094464736f6c63430008040033";

type BlocklistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlocklistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Blocklist__factory extends ContractFactory {
  constructor(...args: BlocklistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Blocklist> {
    return super.deploy(overrides || {}) as Promise<Blocklist>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Blocklist {
    return super.attach(address) as Blocklist;
  }
  connect(signer: Signer): Blocklist__factory {
    return super.connect(signer) as Blocklist__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlocklistInterface {
    return new utils.Interface(_abi) as BlocklistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Blocklist {
    return new Contract(address, _abi, signerOrProvider) as Blocklist;
  }
}
